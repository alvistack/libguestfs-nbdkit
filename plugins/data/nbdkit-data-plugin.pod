=head1 NAME

nbdkit-data-plugin - nbdkit plugin for serving data from the command line

=head1 SYNOPSIS

 nbdkit data [data=]'0 1 2 3 @0x1fe 0x55 0xaa'
             [size=SIZE] [allocator=sparse|...]

 nbdkit data base64='aGVsbG8gbmJka2l0IHVzZXI='
             [size=SIZE] [allocator=sparse|...]

 nbdkit data raw='binary_data'
             [size=SIZE] [allocator=sparse|...]

=head1 DESCRIPTION

C<nbdkit-data-plugin> is a plugin for L<nbdkit(1)> which serves a
small amount of data specified directly on the command line.  The
plugin gets its name from the C<data:> URI scheme used by web
browsers.  This is mainly useful for testing NBD clients.

You can serve data read-only using the I<-r> flag, or read-write.  Any
writes are thrown away when nbdkit exits.

Most operating systems have command line size limits which are quite a
lot smaller than any desirable disk image, so specifying a large,
fully populated disk image on the command line would not be possible.
However you can specify a small amount of data at the beginning of the
image, possibly followed by zeroes (using the C<size> parameter to pad
the image to the full size), or use the C<data> parameter creatively
to make mostly sparse disk images.

The C<size> parameter can specify any virtual size up to the maximum
supported by nbdkit (S<2⁶³-1 bytes>).

=head1 EXAMPLES

=head2 Create small disks filled with test patterns

 nbdkit data ' ( 0x55 0xAA )*2048 '
 nbdkit data ' ( "Hello" )*2000 ' size=8192

The first command creates a disk containing 4096 bytes filled with the
repeating bytes 0x55 0xAA.  The second command repeats
C<HelloHelloHello...>, truncating the disk to exactly 8192 bytes.

See also L<nbdkit-pattern-plugin(3)>.

=head2 Create a 1 MB disk with one empty MBR-formatted partition

 nbdkit data '
   @0x1b8 178 190 207 221 0 0 0 0 2 0 131 32 32 0 1 0 0 0 255 7
   @0x1fe 85 170
   ' size=1M

This example was created by running:

 $ rm -f disk
 $ truncate -s 1M disk
 $ echo start=1 | sfdisk disk
 Device Boot Start   End Sectors    Size Id Type
 disk1           1  2047    2047 1023.5K 83 Linux
 $ ./disk2data.pl disk

The C<disk2data.pl> script is provided in the nbdkit sources
(L<https://github.com/libguestfs/nbdkit/blob/master/plugins/data/disk2data.pl>).

See also L<nbdkit-partitioning-plugin(1)>.

=head2 Create a disk image with sector-aligned data

 nbdkit data ' <file1 @^512 <file2 @^512 <file3 @^512 '

Local binary files F<file1>, F<file2> and F<file3> are copied into the
disk image.  Regardless of the size of these files, they will all be
aligned to 512-byte sector boundaries.  Furthermore because of the
final alignment operation (C<@^512>) the total size of the disk will
also be rounded to a whole number of sectors.

=head2 Create a 1 MB disk with some nonsense data at the beginning

 nbdkit data base64=MTIz size=1M

The above command serves the bytes C<0x31 0x32 0x33> (which is the
base64 decoding of C<MTIz>), followed by S<1M - 3 bytes> of zeroes.

=head2 "Hello, world" using this plugin

 $ nbdkit data raw='Hello, world!' --run 'nbdcopy "$uri" - | cat'
 Hello, world!

This works by creating a disk containing the string
C<"Hello, world!">.  L<nbdcopy(1)> connects to the server using an NBD
URI (C<"$uri">) and copies the disk to stdout (C<->).  The extra
L<cat(1)> is needed because nbdcopy refuses to write raw disk data to
a terminal.

=head1 PARAMETERS

Exactly one of the C<data>, C<base64> or C<raw> parameters must be
supplied.

=over 4

=item [B<data=>]DATA

Specify the disk data using a simple compact format.  See
L</DATA FORMAT> below.

C<data=> is a magic config key and may be omitted in most cases.
See L<nbdkit(1)/Magic parameters>.

=item B<base64=>BASE64

The C<base64> parameter can be used to supply binary data encoded in
base64 on the command line.

This is only supported if nbdkit was compiled with GnuTLS E<ge> 3.6.0.
You can find out by checking if:

 $ nbdkit data --dump-plugin

contains:

 data_base64=yes

=item B<raw=>BINARY

The C<raw> parameter can be used to supply raw binary data directly on
the command line.

It is usually quite difficult to do this unless you are running nbdkit
from another program (see L<nbdkit-captive(1)>).  One particular
problem is that the data must not contain zero bytes (ie. C<\0>) since
those will be processed in C to mean the end of the string.  In almost
all cases it is better to use base64 encoding or the custom C<data>
format.

=item B<size=>SIZE

The data is truncated or extended to the size specified.

This parameter is optional: If omitted the size is defined by the size
of the C<data>, C<raw> or C<base64> parameter.

=item B<allocator=sparse>

=item B<allocator=malloc>[,B<mlock=true>]

=item B<allocator=zstd>

(nbdkit E<ge> 1.22)

Select the backend allocation strategy.  See
L<nbdkit-memory-plugin(1)/ALLOCATORS>.  The default is sparse.

=back

=head1 DATA FORMAT

The C<data> parameter lets you specify small disk images in a simple,
compact format.  It is a string containing a list of bytes which are
written into the disk image sequentially.  You can move the virtual
offset where bytes are written using C<@offset>.

For example:

 nbdkit data '0 1 2 3 @0x1fe 0x55 0xaa'

creates a 0x200 = 512 byte (1 sector) image containing the four bytes
C<0 1 2 3> at the start, and the two bytes C<0x55 0xaa> at the end of
the sector, with the remaining 506 bytes in the middle being all
zeroes.  In this example the size (512 bytes) is implied by the data.
But you could additionally use the C<size> parameter to either
truncate or extend (with zeroes) the disk image.

Whitespace between fields in the string is ignored.

Fields in the string can be:

=over 4

=item B<@>OFFSET

Moves the current offset to C<OFFSET>.  The offset may be specified as
either decimal, octal (prefixed by C<0>) or hexadecimal (prefixed by
C<0x>).  Offset C<@0> is the first byte of the disk.

=item B<@+>N

=item B<@->N

(nbdkit E<ge> 1.22)

Add or subtract C<N> from the current offset.

=item B<@^>ALIGNMENT

(nbdkit E<ge> 1.22)

If the current offset is not a multiple of C<ALIGNMENT> then the
offset is moved forward to the next multiple.  The next byte written
will be aligned to C<ALIGNMENT>.

=item BYTE

Write C<BYTE> at the current offset and advance the offset by 1 byte.
The byte may be specified as either decimal, octal (prefixed by C<0>)
or hexadecimal (prefixed by C<0x>).

=item BYTEB<*>N

(nbdkit E<ge> 1.16)

Repeat C<BYTE> C<N> times (where C<N> is a number).  Note there must
not be any whitespace around the C<*> character.  Increases the offset
by C<N>.

=item B<E<lt>>FILE

(nbdkit E<ge> 1.8)

Read the contents of binary F<FILE> into the disk image at the current
offset.  The offset is incremented by the size of the file.  The
filename can be a relative or absolute path, but cannot contain
whitespace in the name.

=item B<">STRINGB<">

(nbdkit E<ge> 1.22)

Write a string into the image at the current offset and advance the
offset by the length of the string.  To include special characters in
the string you can escape them in the same way as C strings (eg. a
double quote character within the string should be written C<\">).  Be
careful with shell quoting around the whole data parameter.

=item B<(> ... B<)*>N

(nbdkit E<ge> 1.20)

Repeat the enclosed pattern C<N> times.  The offset is incremented by
the length of the enclosed pattern × N.  For example to create a
repeating pattern of 0x55, 0xAA for 512 (2×256) bytes do:

 '( 0x55 0xAA )*256'

The C<( ... )> section recursively creates a new data parser so any of
the above operators can appear inside, including nested C<(...)*N>.
Note that offsets and alignments within the subpattern are relative to
the start of the subpattern, not relative to the final disk image.

=back

=head2 disk2data.pl script

This script can convert from small disk images into the data format
described above.

It is provided in the nbdkit sources.  See
L<https://github.com/libguestfs/nbdkit/blob/master/plugins/data/disk2data.pl>

=head1 FILES

=over 4

=item F<$plugindir/nbdkit-data-plugin.so>

The plugin.

Use C<nbdkit --dump-config> to find the location of C<$plugindir>.

=back

=head1 VERSION

C<nbdkit-data-plugin> first appeared in nbdkit 1.6.

=head1 SEE ALSO

L<nbdkit(1)>,
L<nbdkit-captive(1)>,
L<nbdkit-plugin(3)>,
L<nbdkit-info-plugin(1)>,
L<nbdkit-memory-plugin(1)>,
L<nbdkit-null-plugin(1)>,
L<nbdkit-partitioning-plugin(1)>,
L<nbdkit-pattern-plugin(1)>,
L<nbdkit-random-plugin(1)>,
L<nbdkit-tmpdisk-plugin(1)>,
L<nbdkit-zero-plugin(1)>,
L<https://github.com/libguestfs/nbdkit/blob/master/plugins/data/disk2data.pl>,
L<https://en.wikipedia.org/wiki/Base64>.

=head1 AUTHORS

Richard W.M. Jones

=head1 COPYRIGHT

Copyright (C) 2018-2020 Red Hat Inc.
