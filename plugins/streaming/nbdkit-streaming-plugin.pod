=head1 NAME

nbdkit-streaming-plugin - nbdkit streaming plugin

=head1 SYNOPSIS

 nbdkit streaming write=PIPE [size=SIZE]

 nbdkit streaming read=PIPE [size=SIZE]

=head1 DEPRECATED

B<The streaming plugin is deprecated in S<nbdkit E<ge> 1.26> and will
be removed in S<nbdkit 1.30>>.

A suggested replacement is the libnbd program L<nbdcopy(1)> which is
able to stream to and from pipes, sockets and stdio.  For example to
stream from a qcow2 file to another program over a pipe, use:

 nbdcopy -- [ qemu-nbd -f qcow2 file.qcow2 ] - | hexdump -C

There are further examples in the L<nbdcopy(1)> manual.

=head1 DESCRIPTION

C<nbdkit-streaming-plugin> is a plugin for L<nbdkit(1)> that can
stream in or out of a local pipe or socket.  An alternate tool which
can do something similar to this is L<nbdcopy(1)>.  To turn an NBD
export into a local file use L<nbdfuse(1)>.

If the NBD client opens the NBD port and I<writes> from the start to
the end of the disk without seeking backwards, then you can turn that
into a stream of data on a local pipe or socket using:

 nbdkit streaming write=./pipe

This can be visualised as:

               ┌───────────┐
 NBD           │ nbdkit    │        plugin streams
 client ──────▶│ streaming │──────▶ data to ./pipe
 writes        │ plugin    │
               └───────────┘

If the NBD client opens the NBD port and I<reads> from the start to
the end of the disk without seeking backwards, then you can turn a
local pipe or socket into a stream of data for that client:

 nbdkit streaming read=./pipe

This can be visualised as:

                  ┌───────────┐
 plugin streams   │ nbdkit    │        NBD
 data from ──────▶│ streaming │──────▶ client
 ./pipe           │ plugin    │        reads
                  └───────────┘

Note that F<./pipe> (or the local socket) sees raw data, it is not
using the NBD protocol.  If you want to forward NBD to a local socket
connected to another NBD server, use L<nbdkit-nbd-plugin(1)>.

=head2 Combining this plugin with qemu tools

Typical usage is with qemu tools.  The following command does I<not>
work because the output is a pipe or socket:

 $ mkfifo pipe
 $ qemu-img convert -n input -O raw ./pipe
 qemu-img: Could not open './pipe': A regular file was expected by
 the 'file' driver, but something else was given

However this will work:

 nbdkit -U - streaming write=./pipe \
        --run ' qemu-img convert -n input -O raw $nbd '

              ┌───────────┐       ┌───────────┐
 reads        │ qemu-img  │       │ nbdkit    │        plugin streams
 input ──────▶│ convert   │──────▶│ streaming │──────▶ data to ./pipe
 file         │ command   │       │ plugin    │
              └───────────┘      ↑└───────────┘
                              Unix domain socket (-U -)

This only works because the output format is raw and qemu-img can
write that linearly (without seeking backwards or writing blocks out
of order).  This approach cannot work for other formats such as qcow2
since those contain metadata that must be updated by seeking back to
the start of the file which is not possible if the output is a pipe.

The reverse is to get qemu-img to read from a pipe:

 nbdkit -U - streaming read=./pipe \
        --run ' qemu-img convert -f raw $nbd -O qcow2 output.qcow2 '

For use of the I<--run> and S<I<-U ->> options, see
L<nbdkit-captive(1)>.

=head1 PARAMETERS

Either C<read> or C<write> is required, but not both.

=over 4

=item B<read=>FILENAME

(nbdkit E<ge> 1.22)

Read data stream from the named pipe or socket.  If the pipe or socket
does not exist, then it is created (as a named FIFO), otherwise the
existing pipe or socket is opened and used.

=item B<write=>FILENAME

Write data stream to the named pipe or socket.  If the pipe or socket
does not exist, then it is created (as a named FIFO), otherwise the
existing pipe or socket is opened and used.

=item B<pipe=>FILENAME

For backwards compatibility with nbdkit E<le> 1.20 this is a synonym
for C<write=FILENAME>.

=item B<size=>SIZE

Specify the virtual size of the stream.

This parameter is optional.  If not specified, then the virtual disk
appears to the client to be very large (effectively infinite).
Whether you need to specify this parameter depends on the client.
Some clients don't check the size and just write/stream, others do
checks or calculations based on the apparent size.  It is not possible
for the plugin to work out the size itself since it doesn't see the
whole stream until it has all been streamed.

=back

=head1 FILES

=over 4

=item F<$plugindir/nbdkit-streaming-plugin.so>

The plugin.

Use C<nbdkit --dump-config> to find the location of C<$plugindir>.

=back

=head1 VERSION

C<nbdkit-streaming-plugin> first appeared in nbdkit 1.2.

=head1 SEE ALSO

L<nbdkit(1)>,
L<nbdkit-file-plugin(1)>,
L<nbdkit-nbd-plugin(1)>,
L<nbdkit-plugin(3)>,
L<nbdkit-captive(1)>,
L<nbdcopy(1)>,
L<nbdfuse(1)>,
L<qemu-img(1)>.

=head1 AUTHORS

Richard W.M. Jones

=head1 COPYRIGHT

Copyright (C) 2014-2020 Red Hat Inc.
